; conway.mmp - Conway's Game of Life
; ===== Entry ====

; Draw a glider
&1      0x4802
&1      0x480A
&1      0x480C
&1      0x4811
&1      0x4812

; BufferA and BufferB are the actual buffers, while TopBuffer and BottomBuffer are pointers
; Previous cells are read from BottomBuffer and new cells are written to TopBuffer
&BufferA        TopBuffer
&BufferB        BottomBuffer



; ===== Main loop =====
@ MainLoopEnter
@ MainLoop
    ; Perform cell calculations from BottomBuffer to TopBuffer
    &CalcLoopEnter      Step
    @ CalcLoopReturn


    ; Render TopBuffer to Matrix



    ; Swap top/bottom buffers
    TopBuffer           SwapBuffer
    BottomBuffer        TopBuffer
    SwapBuffer          BottomBuffer

    &MainLoop           Step



; ===== Calculation loop =====
@ CalcLoopEnter
    &0          CalcLoopIter

@ CalcLoop
    &1          ClockMode   ; Switch to instuction step mode
    CalcLoopIter    DispA
    ; Get (X, Y) coordinates from CalcLoopIter
    CalcLoopIter    ALU.A
    &3              ALU.B
    ALU.LSH         X
    &0b111        ALU.B
    ALU.AND         Y
    X   DispA
    Y   DispB


    ; Determine cell value

    ; Increment CalcLoopIter
    CalcLoopIter        ALU.A
    &1                  ALU.B
    ALU.SUM             CalcLoopIter

    ; Check CalcLoopIter
    CalcLoopIter        ALU.A
    CalcLoopCount       ALU.B
    ALU.GTE             ALU.A

    &CalcLoopContinue   ALU.B
    ALU.SUM             Step
    
@ CalcLoopContinue
    &CalcLoop           Step
@ CalcLoopBreak
    &CalcLoopReturn     Step



; ===== Render loop =====
@ RenderLoopEnter
@ RenderLoop
    

@ RenderLoopContinue
@ RenderLoopBreak



; ===== Global tags =====

@ CalcLoopCount   = 256     ; 8 * 8 = 256
@ RenderLoopCount = 256

$ ReturnPoint       0x4000
$ CalcLoopIter      0x4001
$ RenderLoopIter    0x4002

$ TopBuffer         0x4003
$ BottomBuffer      0x4004
$ SwapBuffer        0x4005

$ X                 0x4006
$ Y                 0x4007

$ BufferA           0x4400
$ BufferB           0x4800
